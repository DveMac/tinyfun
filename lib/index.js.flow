// @flow

declare class Class0 {
  static $call(pattern: string | Class0, flags?: "i" | "g" | "m" | "u" | "y" | "ig" | "im" | "iu" | "iy" | "gi" | "gm" | "gu" | "gy" | "mi" | "mg" | "mu" | "my" | "ui" | "ug" | "um" | "uy" | "yi" | "yg" | "ym" | "yu" | "igm" | "igu" | "igy" | "img" | "imu" | "imy" | "iug" | "ium" | "iuy" | "iyg" | "iym" | "iyu" | "giy" | "gim" | "giu" | "gmy" | "gmi" | "gmu" | "guy" | "gui" | "gum" | "gyu" | "gyi" | "gym" | "miu" | "miy" | "mig" | "mgu" | "mgy" | "mgi" | "mug" | "muy" | "mui" | "myg" | "myu" | "myi" | "uig" | "uim" | "uiy" | "ugi" | "ugm" | "ugy" | "umi" | "umg" | "umy" | "uyi" | "uyg" | "uym" | "yiu" | "yig" | "yim" | "ygu" | "ygi" | "ygm" | "ymu" | "ymi" | "ymg" | "yum" | "yui" | "yug" | "igmu" | "igmy" | "igum" | "iguy" | "igym" | "igyu" | "imgy" | "imgu" | "imuy" | "imug" | "imyu" | "imyg" | "iugm" | "iugy" | "iumg" | "iumy" | "iuyg" | "iuym" | "iygu" | "iygm" | "iymu" | "iymg" | "iyum" | "iyug" | "giym" | "giyu" | "gimy" | "gimu" | "giuy" | "gium" | "gmyu" | "gmyi" | "gmiu" | "gmiy" | "gmui" | "gmuy" | "guyi" | "guym" | "guiy" | "guim" | "gumy" | "gumi" | "gyum" | "gyui" | "gyim" | "gyiu" | "gymi" | "gymu" | "miuy" | "miug" | "miyu" | "miyg" | "migu" | "migy" | "mgui" | "mguy" | "mgyi" | "mgyu" | "mgiy" | "mgiu" | "mugy" | "mugi" | "muyg" | "muyi" | "muig" | "muiy" | "mygi" | "mygu" | "myui" | "myug" | "myiu" | "myig" | "uigm" | "uigy" | "uimg" | "uimy" | "uiyg" | "uiym" | "ugiy" | "ugim" | "ugmy" | "ugmi" | "ugym" | "ugyi" | "umig" | "umiy" | "umgi" | "umgy" | "umyi" | "umyg" | "uyim" | "uyig" | "uygm" | "uygi" | "uymg" | "uymi" | "yiug" | "yium" | "yigu" | "yigm" | "yimu" | "yimg" | "ygum" | "ygui" | "ygim" | "ygiu" | "ygmi" | "ygmu" | "ymui" | "ymug" | "ymiu" | "ymig" | "ymgu" | "ymgi" | "yumg" | "yumi" | "yuig" | "yuim" | "yugi" | "yugm" | "igmuy" | "igmyu" | "igumy" | "iguym" | "igymu" | "igyum" | "imgyu" | "imguy" | "imuyg" | "imugy" | "imyug" | "imygu" | "iugmy" | "iugym" | "iumgy" | "iumyg" | "iuygm" | "iuymg" | "iygum" | "iygmu" | "iymug" | "iymgu" | "iyumg" | "iyugm" | "giymu" | "giyum" | "gimyu" | "gimuy" | "giuym" | "giumy" | "gmyui" | "gmyiu" | "gmiuy" | "gmiyu" | "gmuiy" | "gmuyi" | "guyim" | "guymi" | "guiym" | "guimy" | "gumyi" | "gumiy" | "gyumi" | "gyuim" | "gyimu" | "gyium" | "gymiu" | "gymui" | "miuyg" | "miugy" | "miyug" | "miygu" | "miguy" | "migyu" | "mguiy" | "mguyi" | "mgyiu" | "mgyui" | "mgiyu" | "mgiuy" | "mugyi" | "mugiy" | "muygi" | "muyig" | "muigy" | "muiyg" | "mygiu" | "mygui" | "myuig" | "myugi" | "myiug" | "myigu" | "uigmy" | "uigym" | "uimgy" | "uimyg" | "uiygm" | "uiymg" | "ugiym" | "ugimy" | "ugmyi" | "ugmiy" | "ugymi" | "ugyim" | "umigy" | "umiyg" | "umgiy" | "umgyi" | "umyig" | "umygi" | "uyimg" | "uyigm" | "uygmi" | "uygim" | "uymgi" | "uymig" | "yiugm" | "yiumg" | "yigum" | "yigmu" | "yimug" | "yimgu" | "ygumi" | "yguim" | "ygimu" | "ygium" | "ygmiu" | "ygmui" | "ymuig" | "ymugi" | "ymiug" | "ymigu" | "ymgui" | "ymgiu" | "yumgi" | "yumig" | "yuigm" | "yuimg" | "yugim" | "yugmi"): Class0;

  flags: string;
  global: boolean;
  ignoreCase: boolean;
  lastIndex: number;
  multiline: boolean;
  source: string;
  sticky: boolean;
  unicode: boolean;
  compile(): Class0;
  constructor(pattern: string | Class0, flags?: "i" | "g" | "m" | "u" | "y" | "ig" | "im" | "iu" | "iy" | "gi" | "gm" | "gu" | "gy" | "mi" | "mg" | "mu" | "my" | "ui" | "ug" | "um" | "uy" | "yi" | "yg" | "ym" | "yu" | "igm" | "igu" | "igy" | "img" | "imu" | "imy" | "iug" | "ium" | "iuy" | "iyg" | "iym" | "iyu" | "giy" | "gim" | "giu" | "gmy" | "gmi" | "gmu" | "guy" | "gui" | "gum" | "gyu" | "gyi" | "gym" | "miu" | "miy" | "mig" | "mgu" | "mgy" | "mgi" | "mug" | "muy" | "mui" | "myg" | "myu" | "myi" | "uig" | "uim" | "uiy" | "ugi" | "ugm" | "ugy" | "umi" | "umg" | "umy" | "uyi" | "uyg" | "uym" | "yiu" | "yig" | "yim" | "ygu" | "ygi" | "ygm" | "ymu" | "ymi" | "ymg" | "yum" | "yui" | "yug" | "igmu" | "igmy" | "igum" | "iguy" | "igym" | "igyu" | "imgy" | "imgu" | "imuy" | "imug" | "imyu" | "imyg" | "iugm" | "iugy" | "iumg" | "iumy" | "iuyg" | "iuym" | "iygu" | "iygm" | "iymu" | "iymg" | "iyum" | "iyug" | "giym" | "giyu" | "gimy" | "gimu" | "giuy" | "gium" | "gmyu" | "gmyi" | "gmiu" | "gmiy" | "gmui" | "gmuy" | "guyi" | "guym" | "guiy" | "guim" | "gumy" | "gumi" | "gyum" | "gyui" | "gyim" | "gyiu" | "gymi" | "gymu" | "miuy" | "miug" | "miyu" | "miyg" | "migu" | "migy" | "mgui" | "mguy" | "mgyi" | "mgyu" | "mgiy" | "mgiu" | "mugy" | "mugi" | "muyg" | "muyi" | "muig" | "muiy" | "mygi" | "mygu" | "myui" | "myug" | "myiu" | "myig" | "uigm" | "uigy" | "uimg" | "uimy" | "uiyg" | "uiym" | "ugiy" | "ugim" | "ugmy" | "ugmi" | "ugym" | "ugyi" | "umig" | "umiy" | "umgi" | "umgy" | "umyi" | "umyg" | "uyim" | "uyig" | "uygm" | "uygi" | "uymg" | "uymi" | "yiug" | "yium" | "yigu" | "yigm" | "yimu" | "yimg" | "ygum" | "ygui" | "ygim" | "ygiu" | "ygmi" | "ygmu" | "ymui" | "ymug" | "ymiu" | "ymig" | "ymgu" | "ymgi" | "yumg" | "yumi" | "yuig" | "yuim" | "yugi" | "yugm" | "igmuy" | "igmyu" | "igumy" | "iguym" | "igymu" | "igyum" | "imgyu" | "imguy" | "imuyg" | "imugy" | "imyug" | "imygu" | "iugmy" | "iugym" | "iumgy" | "iumyg" | "iuygm" | "iuymg" | "iygum" | "iygmu" | "iymug" | "iymgu" | "iyumg" | "iyugm" | "giymu" | "giyum" | "gimyu" | "gimuy" | "giuym" | "giumy" | "gmyui" | "gmyiu" | "gmiuy" | "gmiyu" | "gmuiy" | "gmuyi" | "guyim" | "guymi" | "guiym" | "guimy" | "gumyi" | "gumiy" | "gyumi" | "gyuim" | "gyimu" | "gyium" | "gymiu" | "gymui" | "miuyg" | "miugy" | "miyug" | "miygu" | "miguy" | "migyu" | "mguiy" | "mguyi" | "mgyiu" | "mgyui" | "mgiyu" | "mgiuy" | "mugyi" | "mugiy" | "muygi" | "muyig" | "muigy" | "muiyg" | "mygiu" | "mygui" | "myuig" | "myugi" | "myiug" | "myigu" | "uigmy" | "uigym" | "uimgy" | "uimyg" | "uiygm" | "uiymg" | "ugiym" | "ugimy" | "ugmyi" | "ugmiy" | "ugymi" | "ugyim" | "umigy" | "umiyg" | "umgiy" | "umgyi" | "umyig" | "umygi" | "uyimg" | "uyigm" | "uygmi" | "uygim" | "uymgi" | "uymig" | "yiugm" | "yiumg" | "yigum" | "yigmu" | "yimug" | "yimgu" | "ygumi" | "yguim" | "ygimu" | "ygium" | "ygmiu" | "ygmui" | "ymuig" | "ymugi" | "ymiug" | "ymigu" | "ymgui" | "ymgiu" | "yumgi" | "yumig" | "yuigm" | "yuimg" | "yugim" | "yugmi"): Class0;
  exec(string: string): any;
  test(string: string): boolean;
  toString(): string;
}

declare module.exports: {any: <any>(f: (_: A) => boolean) => (as: Array<A>) => boolean, chain: (f: (a: any) => any) => (as: Array<any>) => Array<number | string | Object>, comparator: <any, any>(f: (a: A, a: B) => boolean) => (a: A, b: B) => number, compose: (f: Function, ...fs: Array<Function>) => Function, concat: (...as: Array<any>) => Array<mixed /* UNEXPECTED TYPE: EvalT */ | [any, any]>, contains: <T>(a: T) => (as: Array<T>) => boolean, difference: <mixed /* UNEXPECTED TYPE: EvalT */>(xs: Array<T>, ys: Array<T>) => Array<T>, eq: <any>(a1: F) => (a2: F) => boolean, filter: <mixed /* UNEXPECTED TYPE: EvalT */>(f: (value: T, index: number, array: Array<T>) => boolean) => (as: Array<T>) => Array<T>, find: <any>(f: (_: A) => boolean) => (as: Array<A>) => ?A, flatten: (a: Array<any>) => Array<number | string | Object>, groupBy: <A>(f: (_: A) => string) => (as: Array<A>) => $ObjMap<string, A>, gt: <number>(a1: F) => (a2: F) => boolean, gte: <any>(a1: F) => (a2: F) => boolean, head: (as: string) => string, identity: <any>(a: A) => A, intersection: <mixed /* UNEXPECTED TYPE: EvalT */>(xs: Array<T>, ys: Array<T>) => Array<T>, length: (as: Array<any>) => number, lt: <any>(a1: F) => (a2: F) => boolean, lte: <any>(a1: F) => (a2: F) => boolean, map: <mixed /* UNEXPECTED TYPE: EvalT */, [any, any]>(f: (_: A) => B) => (as: Array<A>, context?: any) => Array<B>, path: (ss: Array<string>) => (o: Object) => any, pick: (ks: Array<string>) => (o: Object) => Object, prop: (s: string) => (o: Object) => any, reduce: <mixed, mixed /* UNEXPECTED TYPE: EvalT */>(f: (_: M, _: P) => M, initial?: M) => <P>(as: Array<P>) => M, replace: (p: string | Class0, r: string) => (s: string) => string, slice: <mixed /* UNEXPECTED TYPE: EvalT */>(s: number, e?: number) => (as: Array<A>) => Array<A>, sort: <mixed /* UNEXPECTED TYPE: EvalT */>(f: (a: A, b: A) => number) => (as: Array<A>) => Array<A>, split: (a: string | Class0) => (b: string) => Array<string>, uniq: (as: Array<any>) => Array<mixed /* UNEXPECTED TYPE: EvalT */>, values: (o: Object) => Array<[any, any]>, xprod: <A, B>(as: Array<A>) => (bs: Array<B>) => Array<[A, B]>};
